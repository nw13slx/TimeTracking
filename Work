#!/bin/bash
#note, quotation mark is super important...

logpath=$HOME/worklog

datestamp=$(date +%Y-%m-%d)
timestamp=$(date +%H:%M)
timezone=$(date +%Z)
logdir=$logpath/$(date +%Y)
logfile=$logpath/$(date +%Y/%m)
activities=$logpath/activities
tmp=temp$(date +%s)

takerecord(){
  if [ $1 == "r" ]; then
    echo "<details>" >>$tmp
  fi
  echo "Write the message and type 'save'"
  echo "to save and exit or 'quit' to "
  echo "quit without saving"
  echo "----start----"
  #start to input the message
  while IFS= read -r line; do
   if [ "$line" = 'quit' ]; then
     echo "----quit----"
     rm $tmp
     break 
   fi
   if [ "$line" = 'save' ]; then
     echo "----save----"
     printf '\n'>>$tmp
     if [ $1 == "r" ]; then
       echo "</details>" >>$tmp
     fi
     cat $tmp >>$logfile
     rm $tmp
     break 
   fi
   printf '| %s\n' "$line">>$tmp
  done
  echo 
}

stamp_the_date(){
  system=`uname`
  if [ $system = "Darwin" ]; then
    last_wake="$(date +%b%_d) $(pmset -g log |grep -e " -0500 Wake   "|grep "$(date +%Y-%m-%d)"|head -n 1|awk '{print $2}')"
  elif [ $system = "Linux" ]; then
    last_wake="$(journalctl -b 0|grep "Finishing wakeup"|tail -n 1|awk '{print $1,$2,$3}')"
  else
    echo "cannot recognize the system"
  fi
  last_date=$(echo "$last_wake"|awk '{print $1"-"$2}')
  if [ "$last_date" = "$(date +%b-%d)" ]; then
     timestamp="$(echo $last_wake|awk '{print $3}')"
     echo "time stamp from the wake log file"
  else 
     echo "time stamp not from the wake log file"
  fi

  printf "\\n# $datestamp\\nThe day starts at <i>$timestamp $timezone</i>\\n\\n">>$logfile

}

startaday(){
  if [ ! -d $logdir ]; then
    echo "mkdir -p $logdir"
    mkdir -p $logdir 
  fi

  #remind myself my new year resolution
  if [ -f $logdir/Resolution ]; then
    echo "Your new year resolution:"
    cat $logdir/Resolution
    echo " "
  else
    echo "time to write a new year resolution!"
  fi

  if [ -f $logfile ]; then
    if ! grep -q "$datestamp" $logfile ; then
       stamp_the_date 
    fi
  else
    stamp_the_date
  fi

  if ! grep Goal $logfile|grep "$datestamp" -q ; then
    echo "#write the goal of today. It has to be one line."
    echo "#previous goal:" $(grep Goal $logfile|tail -n 1)
    printf "**Goal** <i>$datestamp</i>: ">$tmp
    takerecord g
  else
    grep Goal $logfile|grep "$datestamp"
  fi
}

activity(){
  #read in activity options
  local aoptions=()
  while IFS= read -r line; do
    aoptions+=("$line")
  done < $activities
  aoptions+=("Quit")
  
  #select one activity
  PS3='activity Please enter your choice: '
  select aopt in "${aoptions[@]}"
  do
    aline="$aopt"
    #echo $aline
    if [ "$aopt" = "Quit" ]; then
      break
    fi
    break
  done
  
  #finish the last activities
  if grep -q "START $datestamp" $logfile; then
    if ! grep -q "START $datestamp" $logfile|tail -n 1 |grep -q "END" ; then
      echo "automatically finish last activity"
      line_number=$(grep -n "START $datestamp" $logfile|tail -n 1|sed 's/:/ /g'|awk '{print $1}')
      sed  "${line_number}s/$/ END $datestamp \<i\>$timestamp $timezone\<\/i\>/" $logfile>$tmp
      mv $tmp $logfile
    fi
  fi
  
  #start the current activities
  if [ "$aline" != "Quit" ]; then
    printf "\\n**${aline}** START $datestamp <i>$timestamp $timezone</i>\\n\\n" >>$logfile
  fi
}

record(){
  printf "**Record** <i>$timezone $datestamp $timestamp</i>:\n\n">$tmp
  echo "write the work record. It can be multiple lines"
  takerecord r
}

compile(){
  echo pandoc \$logfile --wrap=auto -s -c pandoc.css --mathml --latexmathml -o \$logfile.html 
  pandoc --wrap=auto --mathjax --mathml -c $logpath/app/pandoc.css -s --toc $logfile -o $logfile.html
}

gohome(){
    printf "\\n### $sdatestamp.; The day ends at <i>$timestamp $timezone</i>\\n\\n">>$logfile
    compile
}

check_pending(){
  echo "~~~~~~~~~~~~~~~~~~~"
  echo "the pending jobs..."
  grep "(@pending job)" $(find $logpath/20*/ -type f)|cat -n
  echo "~~~~~~~~~~~~~~~~~~~"
}

main(){
  #check whether it is a new year, new month or a new day
  startaday

  moptions=("record" "activity" "go home" "compile" "check pending job" "Quit")
  PS3='main function please enter your choice: '
  select mopt in "${moptions[@]}"
  do
    if [ "$mopt" = "record" ]; then
      record
      break
    elif [ "$mopt" = "activity" ]; then
      activity
      break
    elif [ "$mopt" = "go home" ]; then
      gohome
      break
    elif [ "$mopt" = "compile" ]; then
      compile
      break
    elif [ "$mopt" = "check pending job" ]; then
      check_pending
      break
    else
      break
    fi
  done
}

main
